/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// Define model dimensional parameters
ent     -25;    // entry length before model
y_thick 20;     // y thickness
z_depth 10;      // z thickness
cyl_r   2.5;    // cylinder radius
after   65;      // length after model


// Calculate required coordinates for block mesh
y     # calc "0.5*$y_thick";      // top y dim
y_    # calc "-1.0*$y";         // bottom y dim

z_t     # calc "0.5*$z_depth";      // top z dim
z_b     # calc "-1.0*$z_t";         // bottom z dim

ob      # calc "0.5*$y_thick";       // obstacle block outer x coordinate (exit side)
ob_     # calc "-1.0*$ob";            // obstacle block outer x coordinate (entry side)

cr      # calc "$cyl_r";
cr_     # calc "-1.0*$cr";

cx      # calc "$cyl_r*cos(degToRad(45))";   // cylinder arc x-coordinate
cy      # calc "$cyl_r*sin(degToRad(45))" ;  // cylinder arc y-coordinate

cx_     # calc "-1.0*$cx";                   // negative cylinder x-coordinate
cy_     # calc "-1.0*$cy";                   // negative cylinder y-coordinate

vertices
(
    // Entrance block top
    ($ent       $y_         $z_t)   // 0
    ($ob_       $y_         $z_t)   // 1
    ($ob_       $y_         0)      // 2
    ($ent       $y_         0)      // 3
    
    ($ent       $y          $z_t)   // 4
    ($ob_       $y          $z_t)   // 5
    ($ob_       $y          0)      // 6
    ($ent       $y          0)      // 7
    
    // Entrance block bottom
    ($ent       $y_         0)      // 8
    ($ob_       $y_         0)      // 9
    ($ob_       $y_         $z_b)   // 10
    ($ent       $y_         $z_b)   // 11
    
    ($ent       $y          0)      // 12
    ($ob_       $y          0)      // 13
    ($ob_       $y          $z_b)   // 14
    ($ent       $y          $z_b)   // 15
    

    // Obstacle block top
    ($ob        $y_         $z_t)   // 16
    ($ob        $y_         0)      // 17

    ($cx_       $cy_        $z_t)   // 18
    ($cx        $cy_        $z_t)   // 19
    ($cx        $cy_        0)      // 20
    ($cx_       $cy_        0)      // 21

    ($cx_       $cy         $z_t)   // 22
    ($cx_       $cy         0)      // 23

    ($cx        $cy         $z_t)   // 24
    ($cx        $cy         0)      // 25

    ($ob        $y          $z_t)   // 26
    ($ob        $y          0)      // 27
    
    // Obstacle block bottom
    ($ob        $y_         0)      // 28
    ($ob        $y_         $z_b)   // 29

    ($cx_       $cy_        0)      // 30
    ($cx        $cy_        0)      // 31
    ($cx        $cy_        $z_b)   // 32
    ($cx_       $cy_        $z_b)   // 33

    ($cx_       $cy         0)      // 34
    ($cx_       $cy         $z_b)   // 35

    ($cx        $cy         0)      // 36
    ($cx        $cy         $z_b)   // 37

    ($ob        $y          0)      // 38
    ($ob        $y          $z_b)   // 39

    // After block top
    ($after     $y_         $z_t)   // 40
    ($after     $y_         0)      // 41
    ($after     $y          $z_t)   // 42
    ($after     $y          0)      // 43

    // After block bottom
    ($after     $y_         0)      // 44
    ($after     $y_         $z_b)   // 45
    ($after     $y          0)      // 46
    ($after     $y          $z_b)   // 47

);

blocks
(
    // Entrance block top
    hex ( 0  1  2  3  4  5  6  7) ( 60  1  30) simpleGrading (1 1 1)
    
    // Entrance block bottom
    hex ( 8  9  10 11 12 13 14 15) ( 60  1  30) simpleGrading (1 1 1)
    
    // Obstacle block top
    hex ( 1  16 17 2  18 19 20 21) (30 1 30) simpleGrading (1 1 1)
    hex ( 1  18 21 2  5  22 23 6) (30 1 30) simpleGrading (1 1 1)
    hex ( 22 24 25 23 5  26 27 6) (30 1 30) simpleGrading (1 1 1)
    hex ( 19 16 17 20 24 26 27 25) (30 1 30) simpleGrading (1 1 1)

    // Obstacle block bottom
    hex ( 9  28 29 10  30 31 32 33) (30 1 30) simpleGrading (1 1 1)
    hex ( 9  30 33 10  13  34 35 14) (30 1 30) simpleGrading (1 1 1)
    hex ( 34 36 37 35 13  38 39 14) (30 1 30) simpleGrading (1 1 1)
    hex ( 31 28 29 32 36 38 39 37) (30 1 30) simpleGrading (1 1 1)

    // After block top
    hex ( 16 40 41 17 26 42 43 27) (180 1 30) simpleGrading (1 1 1)

    // After block bottom
    hex ( 28 44 45 29 38 46 47 39) (180 1 30) simpleGrading (1 1 1)
);

edges
(   
    // Top circle 
    arc 18 19 ( 0       $cr_    $z_t)
    arc 20 21 ( 0       $cr_    0)
    arc 22 18 ( $cr_    0       $z_t)
    arc 23 21 ( $cr_    0       0)
    arc 22 24 ( 0       $cr     $z_t)
    arc 23 25 ( 0       $cr     0)
    arc 24 19 ( $cr     0       $z_t)
    arc 25 20 ( $cr     0       0)

    // Bottom circle 
    arc 30 31 ( 0       $cr_    0)
    arc 32 33 ( 0       $cr_    $z_b)
    arc 34 30 ( $cr_    0       0)
    arc 35 33 ( $cr_    0       $z_b)
    arc 34 36 ( 0       $cr     0)
    arc 35 37 ( 0       $cr     $z_b)
    arc 36 31 ( $cr     0       0)
    arc 37 32 ( $cr     0       $z_b)
);

boundary
(
    inlet_top
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    inlet_bot
    {
        type patch;
        faces
        (
            (8 12 15 11)
        );
    }
    outlet_top
    {
        type patch;
        faces
        (
            (40 41 43 42)
        );
    }
    outlet_bot
    {
        type patch;
        faces
        (
            (44 45 47 46)
        );
    }
    walls
    {
        type wall;
        faces
        (
         // Top/front section
            // top
            (4 5 6 7)       // entry
            (5 26 27 6)     // obstacle section
            (26 42 43 27)   // exit section
            // bottom
            (0 1 2 3)
            (1 16 17 2)
            (16 40 41 17)

         // Bottom/rear section
            // top
            (12 13 14 15)
            (13 38 39 14)
            (38 46 47 39)
            // bottom
            (8 9 10 11)
            (9 28 29 10)
            (28 44 45 29)
        );
    }
    obstacle
    {
        type wall;
        faces
        (
            // Top/front section
            (18 19 20 21)
            (19 24 25 20)
            (22 24 25 23)
            (18 22 23 21)
            
            (30 31 32 33)
            (31 36 37 32)
            (34 36 37 35)
            (30 34 35 33)
        );
    }
    separator1
    {
        type patch;
        faces
        (
            ( 8  9  13 12)  // entry
            ( 9  30 34 13)  // entry wedge
            (31 28 38 36)   // exit wedge
            (34  36 38 13)  // wedge upper
            ( 9  28 31 30)  // wedge lower
            (28 44 46 38)   // exit
        );
    }
    separator2
    {
        type patch;
        faces
        (
            ( 3  7  6  2)   // entry 2
            (2 6 23 21)     // entry wedge 2
            (20  25 27 17)  // exit wedge 2 
            (23  6 27 25)   // wedge upper 2
            ( 2 21 20 17)   // wedge lower 2
            (17 27 43 41)   // exit 2
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            // Top section
            ( 0  1  5  4)
            ( 1  18 22 5)
            (22  24 26 5)
            (19  16 26 24)
            ( 1  16 19 18)
            (16  40 42 26)
            
            // Bottom
            (11 15 14 10) // entry block
            (10 14 35 33) // entry wedge
            (35 14 39 37) // wedge upper
            (32 37 39 29) // wedge exit
            (10 33 32 29) // wedge lower
            (29 39 47 45) // exit block
        );
    }
);

mergePatchPairs
(
  (separator1 separator2)
);
